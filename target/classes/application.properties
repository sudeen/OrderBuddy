#spring.thymeleaf.cache=false
server.port=8081

# ==========================
#DATA SOURCE
# ==========================

#Set here configurations for the database connection
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.url=jdbc:postgresql://localhost:5432/orderbuddy
#spring.datasource.url=jdbc:postgresql://elmer.db.elephantsql.com:5432/iredyubl
#spring.datasource.url=jdbc:postgresql://ec2-54-225-88-191.compute-1.amazonaws.com:5432/d44m8ldlji0o5d?sslmode=require&sslfactory=org.postgresql.ssl.NonValidatingFactory

#spring.datasource.platform=postgres

#Username and secret

spring.datasource.username=postgres
#spring.datasource.username=wgfmdvmbxitdna

spring.datasource.password=
#spring.datasource.password=d38d9d46eaa31e927d41e222659475f1f48d8a60fc6162145d79cc775a91b5d0

#Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhilleIdle=true
spring.datasource.validationQuery=SELECT 1

# ==========================
# =JPA/HIBERNATE
# ==========================

#Use spring.jpa.properties. * for Hibernate native properties (the prefix is
#stripped before adding them to the entity manager).

#Show or not log for each sql query
spring.jpa.show-sql=true

#Hibernate ddl auto(create, create-drop, update): with "update" the database
#schema will be automatically updated accordingly to java entities found in
#the project
spring.jpa.hibernate.ddl-auto=update

#Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect